Build a front-end solution where non-technical users (e.g. business analysts or domain users) can:
	‚Ä¢	Provide a natural-language description (e.g. ‚ÄúCreate a leave request form with employee name, leave type, start and end date‚Äù)
	‚Ä¢	Receive a fully functional form dynamically generated by an AI agent (Claude)
	‚Ä¢	Interact with the form through consistent, styled UI components
	‚Ä¢	Submit data and optionally regenerate/extend the form using further instructions


Component
Description
Claude API (Agentic AI)
Accepts user prompts and generates JSON schemas representing the form structure and metadata
React Frontend
Renders forms dynamically using a form renderer mapped to schema fields
Redux State Management
Stores and manages form schema and data for global access
Custom UI Component Library
Reusable, styled UI components (e.g. CustomTextField, CustomDropdown, CustomDatePicker) ensure consistency across all forms
Node.js/Express API Proxy
Acts as a secure middleware to connect Claude API and handle schema generation, validation, and logging


Workflow Overview
	1.	User Input: A user enters a prompt like:
‚ÄúI need an onboarding form for new employees with fields for name, department, joining date, and manager.‚Äù
	2.	Claude Request:
	‚Ä¢	Prompt is sent to Claude via backend API.
	‚Ä¢	Claude returns a structured form schema (JSON) with fields, types, validation rules, and UI hints.
	3.	Redux Integration:
	‚Ä¢	The form schema is stored in the Redux store (formSchemaSlice).
	4.	Dynamic Form Rendering:
	‚Ä¢	A React component (DynamicForm) reads the schema and uses the custom UI components to render input fields dynamically.
	5.	Submission & Feedback Loop:
	‚Ä¢	On form submit, data is validated.
	‚Ä¢	Optional: AI validates business logic or offers refinement (‚ÄúDo you want to add a signature field?‚Äù)
	‚Ä¢	Form can be iteratively improved using new prompts, enabling agentic flow (Claude as a form-design assistant).

Claude is not just a one-time form generator, but an agent that:
	‚Ä¢	Understands complex instructions
	‚Ä¢	Can revise the form (‚ÄúAdd a field for emergency contact‚Äù)
	‚Ä¢	Suggests optimizations (‚ÄúDo you want to add a terms checkbox?‚Äù)
	‚Ä¢	Can loop across multiple interactions
	‚Ä¢	Maintains reasoning memory (if memory-enabled)

Benefits
	‚Ä¢	No-code experience for form creation
	‚Ä¢	Faster iteration and form deployment
	‚Ä¢	Centralized schema logic and reusability
	‚Ä¢	Enhanced accessibility and UX consistency
	‚Ä¢	Extensible to backend form workflows

‚∏ª

üîí Security Considerations
	‚Ä¢	Use Claude behind a proxy (Node.js) with API keys securely managed via .env
	‚Ä¢	Validate incoming form schemas before rendering (schema sanitization)
	‚Ä¢	Optionally, limit prompt length or field types Claude can generate
